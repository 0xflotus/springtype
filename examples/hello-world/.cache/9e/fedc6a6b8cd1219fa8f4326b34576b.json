{"id":"../node_modules/@springtype/springtype-incubator/dist/di/src/decorator/Inject.js","dependencies":[{"name":"/Users/aron/IdeaProjects/springtype-incubator/examples/hello-world/node_modules/@springtype/springtype-incubator/dist/di/src/decorator/Inject.js.map","includedInParent":true,"mtime":1538584912585},{"name":"/Users/aron/IdeaProjects/springtype-incubator/examples/hello-world/node_modules/@springtype/springtype-incubator/src/di/src/decorator/Inject.ts","includedInParent":true,"mtime":1538255645651},{"name":"/Users/aron/IdeaProjects/springtype-incubator/examples/hello-world/package.json","includedInParent":true,"mtime":1538585011922},{"name":"/Users/aron/IdeaProjects/springtype-incubator/examples/hello-world/node_modules/@springtype/springtype-incubator/package.json","includedInParent":true,"mtime":1538575570092},{"name":"reflect-metadata","loc":{"line":3,"column":8},"parent":"/Users/aron/IdeaProjects/springtype-incubator/examples/hello-world/node_modules/@springtype/springtype-incubator/dist/di/src/decorator/Inject.js","resolved":"/Users/aron/IdeaProjects/springtype-incubator/examples/hello-world/node_modules/@springtype/springtype-incubator/node_modules/reflect-metadata/Reflect.js"},{"name":"../BeanFactory","loc":{"line":4,"column":30},"parent":"/Users/aron/IdeaProjects/springtype-incubator/examples/hello-world/node_modules/@springtype/springtype-incubator/dist/di/src/decorator/Inject.js","resolved":"/Users/aron/IdeaProjects/springtype-incubator/examples/hello-world/node_modules/@springtype/springtype-incubator/dist/di/src/BeanFactory.js"},{"name":"../ComponentReflector","loc":{"line":5,"column":37},"parent":"/Users/aron/IdeaProjects/springtype-incubator/examples/hello-world/node_modules/@springtype/springtype-incubator/dist/di/src/decorator/Inject.js","resolved":"/Users/aron/IdeaProjects/springtype-incubator/examples/hello-world/node_modules/@springtype/springtype-incubator/dist/di/src/ComponentReflector.js"},{"name":"../ApplicationContext","loc":{"line":6,"column":37},"parent":"/Users/aron/IdeaProjects/springtype-incubator/examples/hello-world/node_modules/@springtype/springtype-incubator/dist/di/src/decorator/Inject.js","resolved":"/Users/aron/IdeaProjects/springtype-incubator/examples/hello-world/node_modules/@springtype/springtype-incubator/dist/di/src/ApplicationContext.js"}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nrequire(\"reflect-metadata\");\nconst BeanFactory_1 = require(\"../BeanFactory\");\nconst ComponentReflector_1 = require(\"../ComponentReflector\");\nconst ApplicationContext_1 = require(\"../ApplicationContext\");\nexports.INJECT_DECORATOR_METADATA_KEY = Symbol(\"@Inject\");\nfunction createDefaultArgumentsInjectionMetadata() {\n    return {\n        arguments: []\n    };\n}\nexports.createDefaultArgumentsInjectionMetadata = createDefaultArgumentsInjectionMetadata;\nfunction resolveInjectionParameterValue(argumentsInjectionMetaData, index, isTestComponent) {\n    let injectionValue;\n    if (!argumentsInjectionMetaData.arguments[index])\n        return;\n    const injectionReference = argumentsInjectionMetaData.arguments[index].injectionReference;\n    if (typeof injectionReference !== 'undefined') {\n        if (typeof injectionReference === 'function') {\n            if (ComponentReflector_1.ComponentReflector.isComponent(injectionReference)) {\n                // it is not a InjectBeanFactory, just use the instance\n                injectionValue = ApplicationContext_1.ApplicationContext.getInstance().getBean(injectionReference, isTestComponent ? BeanFactory_1.InjectionProfile.TEST : BeanFactory_1.InjectionProfile.DEFAULT, argumentsInjectionMetaData.arguments[index].injectionStrategy);\n            }\n            else {\n                // case: function is not a InjectBeanFactory NOR registered bean -> inject function reference\n                injectionValue = injectionReference;\n            }\n        }\n        else {\n            // use the value directly (any value case)\n            injectionValue = injectionReference;\n        }\n    }\n    return injectionValue;\n}\nexports.resolveInjectionParameterValue = resolveInjectionParameterValue;\nfunction Inject(injectionReference, injectionStrategy = BeanFactory_1.InjectionStrategy.SINGLETON) {\n    return function (targetClassInstanceOrCtor, propertyKey, argumentIndex) {\n        if (typeof targetClassInstanceOrCtor === 'function') {\n            // case: param on constructor function\n            ComponentReflector_1.ComponentReflector.setConstructorArgumentsInjectionMetadata(targetClassInstanceOrCtor, argumentIndex, injectionReference, injectionStrategy);\n        }\n        else {\n            // case: param on method\n            ComponentReflector_1.ComponentReflector.setMethodArgumentsInjectionMetadata(targetClassInstanceOrCtor, argumentIndex, propertyKey, injectionReference, injectionStrategy);\n        }\n    };\n}\nexports.Inject = Inject;\n","map":{"version":3,"file":"Inject.js","sourceRoot":"","sources":["../../../../src/di/src/decorator/Inject.ts"],"names":[],"mappings":";;AAAA,4BAA0B;AAC1B,gDAAmE;AACnE,8DAAyD;AACzD,8DAAyD;AAE5C,QAAA,6BAA6B,GAAG,MAAM,CAAC,SAAS,CAAC,CAAC;AAY/D,SAAgB,uCAAuC;IACnD,OAAO;QACH,SAAS,EAAE,EAAE;KAChB,CAAA;AACL,CAAC;AAJD,0FAIC;AAID,SAAgB,8BAA8B,CAC1C,0BAAsD,EACtD,KAAa,EACb,eAAwB;IAGxB,IAAI,cAAmB,CAAC;IAExB,IAAI,CAAC,0BAA0B,CAAC,SAAS,CAAC,KAAK,CAAC;QAAE,OAAO;IAEzD,MAAM,kBAAkB,GACpB,0BAA0B,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,kBAAkB,CAAC;IAEnE,IAAI,OAAO,kBAAkB,KAAK,WAAW,EAAE;QAE3C,IAAI,OAAO,kBAAkB,KAAK,UAAU,EAAE;YAE1C,IAAI,uCAAkB,CAAC,WAAW,CAAC,kBAAkB,CAAC,EAAE;gBAEpD,uDAAuD;gBACvD,cAAc,GAAG,uCAAkB,CAAC,WAAW,EAAE,CAAC,OAAO,CACrD,kBAAkB,EAClB,eAAe,CAAC,CAAC,CAAC,8BAAgB,CAAC,IAAI,CAAC,CAAC,CAAC,8BAAgB,CAAC,OAAO,EAClE,0BAA0B,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,iBAAiB,CAChE,CAAC;aAEL;iBAAM;gBAEH,6FAA6F;gBAC7F,cAAc,GAAG,kBAAkB,CAAC;aACvC;SAEJ;aAAM;YAEH,0CAA0C;YAC1C,cAAc,GAAG,kBAAkB,CAAC;SACvC;KACJ;IACD,OAAO,cAAc,CAAC;AAC1B,CAAC;AAvCD,wEAuCC;AAED,SAAgB,MAAM,CAClB,kBAAuC,EACvC,oBAAuC,+BAAiB,CAAC,SAAS;IAGlE,OAAO,UAAS,yBAA0C,EAAE,WAA4B,EAAE,aAAqB;QAE3G,IAAI,OAAO,yBAAyB,KAAK,UAAU,EAAE;YAEjD,sCAAsC;YACtC,uCAAkB,CAAC,wCAAwC,CACvD,yBAAyB,EACzB,aAAa,EACb,kBAAkB,EAClB,iBAAiB,CACpB,CAAC;SAEL;aAAM;YAEH,wBAAwB;YACxB,uCAAkB,CAAC,mCAAmC,CAClD,yBAAyB,EACzB,aAAa,EACb,WAAW,EACX,kBAAkB,EAClB,iBAAiB,CACpB,CAAC;SACL;IACL,CAAC,CAAA;AACL,CAAC;AA7BD,wBA6BC","sourcesContent":["import \"reflect-metadata\";\nimport {InjectionProfile, InjectionStrategy} from \"../BeanFactory\";\nimport {ComponentReflector} from \"../ComponentReflector\";\nimport {ApplicationContext} from \"../ApplicationContext\";\n\nexport const INJECT_DECORATOR_METADATA_KEY = Symbol(\"@Inject\");\n\nexport interface ArgumentInjectionMetadata {\n    index: number;\n    injectionReference: InjectionReference;\n    injectionStrategy: InjectionStrategy;\n}\n\nexport interface ArgumentsInjectionMetaData {\n    arguments: Array<ArgumentInjectionMetadata>;\n}\n\nexport function createDefaultArgumentsInjectionMetadata() {\n    return {\n        arguments: []\n    }\n}\n\nexport declare type InjectionReference = any | Function;\n\nexport function resolveInjectionParameterValue(\n    argumentsInjectionMetaData: ArgumentsInjectionMetaData,\n    index: number,\n    isTestComponent: boolean\n) {\n\n    let injectionValue: any;\n\n    if (!argumentsInjectionMetaData.arguments[index]) return;\n\n    const injectionReference: InjectionReference =\n        argumentsInjectionMetaData.arguments[index].injectionReference;\n\n    if (typeof injectionReference !== 'undefined') {\n\n        if (typeof injectionReference === 'function') {\n\n            if (ComponentReflector.isComponent(injectionReference)) {\n\n                // it is not a InjectBeanFactory, just use the instance\n                injectionValue = ApplicationContext.getInstance().getBean(\n                    injectionReference,\n                    isTestComponent ? InjectionProfile.TEST : InjectionProfile.DEFAULT,\n                    argumentsInjectionMetaData.arguments[index].injectionStrategy,\n                );\n\n            } else {\n\n                // case: function is not a InjectBeanFactory NOR registered bean -> inject function reference\n                injectionValue = injectionReference;\n            }\n\n        } else {\n\n            // use the value directly (any value case)\n            injectionValue = injectionReference;\n        }\n    }\n    return injectionValue;\n}\n\nexport function Inject(\n    injectionReference?: InjectionReference,\n    injectionStrategy: InjectionStrategy = InjectionStrategy.SINGLETON\n) {\n\n    return function(targetClassInstanceOrCtor: Object|Function, propertyKey: string | symbol, argumentIndex: number) {\n\n        if (typeof targetClassInstanceOrCtor === 'function') {\n\n            // case: param on constructor function\n            ComponentReflector.setConstructorArgumentsInjectionMetadata(\n                targetClassInstanceOrCtor,\n                argumentIndex,\n                injectionReference,\n                injectionStrategy\n            );\n\n        } else {\n\n            // case: param on method\n            ComponentReflector.setMethodArgumentsInjectionMetadata(\n                targetClassInstanceOrCtor,\n                argumentIndex,\n                propertyKey,\n                injectionReference,\n                injectionStrategy\n            );\n        }\n    }\n}"]}},"hash":"dd01187e9853a9a729154df76d512036","cacheData":{"env":{}}}