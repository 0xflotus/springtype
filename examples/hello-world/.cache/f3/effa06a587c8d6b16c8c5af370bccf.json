{"id":"../node_modules/@springtype/springtype-incubator/dist/html/src/ui/JSXRenderer.js","dependencies":[{"name":"/Users/aron/IdeaProjects/springtype-incubator/examples/hello-world/node_modules/@springtype/springtype-incubator/dist/html/src/ui/JSXRenderer.js.map","includedInParent":true,"mtime":1538584912616},{"name":"/Users/aron/IdeaProjects/springtype-incubator/examples/hello-world/node_modules/@springtype/springtype-incubator/src/html/src/ui/JSXRenderer.ts","includedInParent":true,"mtime":1538583100132},{"name":"/Users/aron/IdeaProjects/springtype-incubator/examples/hello-world/package.json","includedInParent":true,"mtime":1538585011922},{"name":"/Users/aron/IdeaProjects/springtype-incubator/examples/hello-world/node_modules/@springtype/springtype-incubator/package.json","includedInParent":true,"mtime":1538575570092}],"generated":{"js":"\"use strict\";\nclass JSXRenderer {\n    constructor(nativeCreateElement) {\n        this.nativeCreateElement = nativeCreateElement;\n        this.stateHeapCache = {};\n        this.attrNormalizations = {\n            classname: 'class'\n        };\n        this.stateHeapPtr = 0;\n    }\n    normalizeAttributeName(name) {\n        return this.attrNormalizations[name.toLowerCase()] || name;\n    }\n    getStateHeapPtr() {\n        return 'state-' + (++window.React.stateHeapPtr);\n    }\n    appendChild(child, element) {\n        let childToAppend = child;\n        if (child instanceof Node) {\n            childToAppend = child;\n        }\n        else if (typeof child == 'string') {\n            childToAppend = document.createTextNode(child);\n        }\n        else if (child instanceof Array) {\n            // Array of Node\n            child.forEach((childNode) => {\n                this.appendChild(childNode, element);\n            });\n            return element;\n        }\n        if (childToAppend instanceof Node) {\n            return element.appendChild(childToAppend);\n        }\n    }\n    ;\n    createElement(name, attributes, ...children) {\n        attributes = attributes || {};\n        const nativeOptions = !!attributes.is ? { is: attributes.is } : undefined;\n        delete attributes.is;\n        const element = this.nativeCreateElement(name, nativeOptions);\n        // content attributes vs IDL attributes have many cases\n        Object.entries(attributes).forEach(([name, value]) => {\n            // set event handler\n            if (name.startsWith('on')) {\n                element[name] = value;\n            }\n            else if (typeof value !== 'string') {\n                const stateHeapPtr = this.getStateHeapPtr();\n                this.stateHeapCache[stateHeapPtr] = value;\n                element.setAttribute(name, stateHeapPtr);\n            }\n            else {\n                // set string HTML attribute\n                element.setAttribute(this.normalizeAttributeName(name), value);\n            }\n        });\n        children\n            .filter(child => !(child == null || typeof child == 'undefined'))\n            .forEach((child) => {\n            return this.appendChild(child, element);\n        });\n        return element;\n    }\n}\n// implement React JSX rendering API (used globally by TypeScript compiler --jsx emitted code)\nwindow.React = new JSXRenderer(document.createElement.bind(document));\ndocument.createElement = window.React.createElement;\n","map":{"version":3,"file":"JSXRenderer.js","sourceRoot":"","sources":["../../../../src/html/src/ui/JSXRenderer.ts"],"names":[],"mappings":"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","sourcesContent":["interface AttributeNormalization {\n    [attributeName: string]: string\n}\n\ninterface StateHeapCache {\n    [stateHeapPtr: string]: any;\n}\n\nclass JSXRenderer {\n\n    stateHeapCache: StateHeapCache = {};\n\n    protected attrNormalizations: AttributeNormalization = {\n        classname: 'class'\n    };\n\n    protected stateHeapPtr: number = 0;\n\n    constructor(protected nativeCreateElement: Function) {\n    }\n\n    protected normalizeAttributeName(name: string): string {\n        return this.attrNormalizations[name.toLowerCase()] || name;\n    }\n\n    protected getStateHeapPtr(): string {\n        return 'state-' + (++(<any>window).React.stateHeapPtr);\n    }\n\n    protected appendChild(child: string|Node|Array<Node>, element: Node) {\n\n        let childToAppend = child;\n\n        if (child instanceof Node) {\n\n            childToAppend = child;\n\n        } else if (typeof child == 'string') {\n\n            childToAppend = document.createTextNode(child);\n\n        } else if (child instanceof Array) {\n\n            // Array of Node\n\n            child.forEach((childNode: Node) => {\n                this.appendChild(childNode, element);\n            });\n            return element;\n        }\n\n        if (childToAppend instanceof Node) {\n\n            return element.appendChild(\n                childToAppend\n            )\n        }\n    };\n\n    createElement(name: string, attributes: any, ...children: Array<any>) {\n\n        attributes = attributes || {};\n\n        const nativeOptions = !!attributes.is ? { is: attributes.is } : undefined;\n\n        delete attributes.is;\n\n        const element = this.nativeCreateElement(name, nativeOptions);\n\n        // content attributes vs IDL attributes have many cases\n        Object.entries(attributes).forEach(([name,value]) => {\n\n            // set event handler\n            if (name.startsWith('on')) {\n\n                element[name] = value;\n\n            } else if (typeof value !== 'string') {\n\n                const stateHeapPtr = this.getStateHeapPtr();\n\n                this.stateHeapCache[stateHeapPtr] = value;\n\n                element.setAttribute(name, stateHeapPtr);\n\n            } else {\n\n                // set string HTML attribute\n                element.setAttribute(this.normalizeAttributeName(name), value);\n            }\n        });\n\n        children\n            .filter(child => !(child == null || typeof child == 'undefined'))\n            .forEach((child) => {\n                return this.appendChild(child, element);\n            });\n\n        return element;\n    }\n}\n\n// implement React JSX rendering API (used globally by TypeScript compiler --jsx emitted code)\n(<any>window).React = new JSXRenderer(\n    document.createElement.bind(document)\n);\n\ndocument.createElement = (<any>window).React.createElement;"]}},"hash":"4364a8b61df6d5eadeeef8f6d23eea40","cacheData":{"env":{}}}